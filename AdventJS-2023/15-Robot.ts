/* Estamos creando una funci√≥n a la que le pasamos: el almac√©n üè¨ que deben navegar y los movimientos ‚ÜîÔ∏è que pueden realizar.

El almac√©n se representa como un array de cadenas de texto, donde:

. significa que hay v√≠a libre.
* significa que hay un obst√°culo.
! es la posici√≥n inicial del robot.
Los movimientos son un array de cadenas de texto, donde:

R mueve al robot una posici√≥n a la derecha.
L mueve al robot una posici√≥n a la izquierda.
U mueve al robot una posici√≥n hacia arriba.
D mueve al robot una posici√≥n hacia abajo.
Hay que tener en cuenta que el robot no puede superar los obst√°culos ni los l√≠mites del almac√©n.

Dados un almac√©n y los movimientos, debemos devolver el array con la posici√≥n final de nuestro robot.
Ten en cuenta que la store es un array que puede ser de un n√∫mero de filas que va de 1 a 100, ya que tenemos almacenes de todos los tama√±os.
Tambi√©n que el robot es posible que termine en su posici√≥n inicial si no puede moverse o si est√° dando vueltas. */

function autonomousDrive(store: string[], movements: string[]): string[]{
  const numRows = store.length
  if(numRows === 0) return []

  const numCols = store[0].length
  const storeGrid = store.map(row => row.split(''))
  let robotPosition: {row: number, col: number} | null = null

  // Find the initial position of the robot
  for(let row = 0; row < numRows; row++){
    const col = store[row].indexOf('!')
    if(col !== -1){
      robotPosition = {row, col}
      break
    }
  }

  // If the robot is not in the store, return the store
  if(!robotPosition) return store

  const moveRobot = (movement: string): void => {
    const {row, col} = robotPosition!
    switch(movement){
      case 'R':
        if(col + 1 < numCols && storeGrid[row][col + 1] === '.'){
          storeGrid[row][col] = '.'
          storeGrid[row][col + 1] = '!'
          robotPosition = {row, col: col + 1}
        }
        break;
      case 'L':
        if(col - 1 >= 0 && storeGrid[row][col - 1] === '.'){
          storeGrid[row][col] = '.'
          storeGrid[row][col - 1] = '!'
          robotPosition = {row, col: col - 1}
        }
        break;
      case 'U':
        if(row - 1 >= 0 && storeGrid[row + 1][col] === '.'){
          storeGrid[row][col] = '.'
          storeGrid[row - 1][col] = '!'
          robotPosition = {row: row - 1, col}
        }
        break;
      case 'D':
        if(row + 1 < numRows && storeGrid[row + 1][col] === '.'){
          storeGrid[row][col] = '.'
          storeGrid[row + 1][col] = '!'
          robotPosition = {row: row + 1, col}
        }
        break;
    }
  }

  for(const movement of movements){
    moveRobot(movement)
  }

  return storeGrid.map(row => row.join(''))
}

// const store = ['..!....', '...*.*.']

// const movements = ['R', 'R', 'D', 'L']
// const result = autonomousDrive(store, movements)
// console.log(result)
// [
//   ".......",
//   "...*!*."
// ]
// El √∫ltimo movimiento es hacia la izquierda, pero no puede moverse porque hay un obst√°culo.